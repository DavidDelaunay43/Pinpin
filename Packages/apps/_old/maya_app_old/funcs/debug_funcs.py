import re
from maya import cmds

def list_nodes(node_types: list) -> list:
    
    return_nodes = []
    for node_type in node_types:
        nodes = cmds.ls(type = node_type)
        return_nodes += nodes
        
    return return_nodes

RMAN_NODES = [
    'PxrBumpRoughness',
    'PxrBlenderPrincipledInputs',
    'PxrRandomTextureManifold',
    'PxrLayer',
    'PxrStylizedControl',
    'PxrCylinderLight',
    'PxrDiskLight',
    'PxrDistantLight',
    'PxrDomeLight',
    'PxrEnvDayLight',
    'PxrMeshLight',
    'PxrPortalLight',
    'PxrRectLight',
    'PxrSphereLight',
    'PxrBarnLightFilter',
    'PxrCookieLightFilter',
    'PxrGoboLightFilter',
    'PxrBump',
    'PxrBumpMixer',
    'PxrFlakes',
    'PxrNormalMap',
    'PxrArithmetic',
    'PxrAttribute',
    'PxrMatteID',
    'PxrMetallicWorkflow',
    'PxrPrimvar',
    'PxrToFloat3',
    'PxrVariable',
    'PxrBlackBody',
    'PxrBlend',
    'PxrClamp',
    'PxrColorCorrect',
    'PxrColorGrade',
    'PxrColorSpace',
    'PxrExposure',
    'PxrGamma',
    'PxrHairColor',
    'PxrHSL',
    'PxrInvert',
    'PxrLayeredBlend',
    'PxrMix',
    'PxrProjectionStack',
    'PxrRamp',
    'PxrRemap',
    'PxrSetRange',
    'PxrThinFilm',
    'PxrThreshold',
    'PxrVary',
    'PxrBumpManifold2D',
    'PxrHexTileManifold',
    'PxrManifold2D',
    'PxrManifold3D',
    'PxrProjector',
    'PxrRoundCube',
    'PxrTileManifold',
    'PxrChecker',
    'PxrEnvGround',
    'PxrFractal',
    'PxrGrid',
    'PxrLayeredTexture',
    'PxrMultiTexture',
    'PxrPhasorNoise',
    'PxrProjectionLayer',
    'PxrPtexture',
    'PxrTexture',
    'PxrVoronoise',
    'PxrWorley',
    'PxrCross',
    'PxrCurvature',
    'PxrDirt',
    'PxrTangentField',
    'PxrDispScalarLayer',
    'PxrDispTransform',
    'PxrDispVectorLayer',
    'aaOceanPrmanShader',
    'PxrLayerMixer',
    'PxrRadialDensity',
    'PxrBakePointCloud',
    'PxrBakeTexture',
    'PxrAovLight',
    'PxrBlockerLightFilter',
    'PxrIntMultLightFilter',
    'PxrRampLightFilter',
    'PxrRodLightFilter',
    'PxrAdjustNormal',
    'PxrTee',
    'PxrOSL',
    'PxrFacingRatio',
    'PxrWireframe',
    'PxrDisplace',
    'PxrDot',
    'PxrSwitch',
    'PxrToFloat',
    'PxrShadedSide',
    'shadingEngine'
]

ARNOLD_NODES = [
    'aiAxfShader',
    'aiStateFloat',
    'aiStateVector',
    'aiReadRGB',
    'aiThinFilm',
    'aiColorToFloat',
    'aiMotionVector',
    'aiStateInt',
    'aiUserDataInt',
    'aiCarPaint',
    'aiWriteFloat',
    'aiStandardSurface',
    'aiStandardHair',
    'aiSwitch',
    'aiRaySwitch',
    'aiShadowMatte',
    'aiCellNoise',
    'aiCheckerboard',
    'aiFlakes',
    'aiMeshLight',
    'aiSkyDomeLight',
    'aiLightBlocker',
    'aiLightDecay',
    'aiMaterialXShader',
    'aiMatte',
    'aiMixShader',
    'aiPassthrough',
    'aiToon',
    'aiTwoSided',
    'aiUtility',
    'aiWireframe',
    'aiPhysicalSky',
    'aiWriteRgba',
    'aiWriteVector',
    'cryptomatte',
    'aiFloatToMatrix',
    'aiFloatToRgba',
    'aiRgbToVector',
    'aiRgbaToFloat',
    'aiVectorToRgb',
    'aiAbs',
    'aiAdd',
    'aiAtan',
    'aiCompare',
    'aiCross',
    'aiDivide',
    'aiDot',
    'aiLength',
    'aiLog',
    'aiMatrixInterpolate',
    'aiMatrixMultiplyVector',
    'aiMatrixTransform',
    'aiMax',
    'aiMin',
    'aiModulo',
    'aiMultiply',
    'aiNegate',
    'aiNormalize',
    'aiPow',
    'aiRandom',
    'aiReciprocal',
    'aiSign',
    'aiSqrt',
    'aiSubtract',
    'aiTrigo',
    'aiBlackbody',
    'aiBump2d',
    'aiBump3d',
    'aiCameraProjection',
    'aiClamp',
    'aiColorConvert',
    'aiColorJitter',
    'aiComplexIor',
    'aiComposite',
    'aiFacingRatio',
    'aiLayerFloat',
    'aiLayerRgba',
    'aiNormalMap',
    'aiOslShader',
    'aiRampFloat',
    'aiRampRgb',
    'aiShuffle',
    'aiSpaceTransform',
    'aiTraceSet',
    'aiUvProjection',
    'aiUvTransform',
    'aiVectorMap',
    'aiUserDataBool',
    'aiUserDataColor',
    'aiUserDataVec2',
    'aiUserDataVector',
    'aiCache',
    'aiVolumeSampleFloat',
    'aiVolumeSampleRgb',
    'aiColorCorrect',
    'aiBarndoor',
    'aiFog',
    'aiReadInt',
    'aiIsFinite',
    'aiRange',
    'aiAmbientOcclusion',
    'aiFlat',
    'aiLambert',
    'aiCurvature',
    'aiAreaLight',
    'aiExp',
    'aiRoundCorners',
    'aiNoise',
    'aiStandardVolume',
    'aiAtmosphereVolume',
    'aiImage',
    'aiTriplanar',
    'aiReadFloat',
    'aiWriteColor',
    'aiGobo',
    'aiReadRGBA',
    'aiWriteInt',
    'aiComplement',
    'aiUserDataString',
    'aiFraction',
    'aiPhotometricLight',
    'aiClipGeo',
    'aiLayerShader',
    'aiFloatToInt',
    'aiUserDataFloat'
]

MAYA_NODES = [
    'fractal',
    'checker',
    'fluidTexture2D',
    'simplexNoise',
    'bulge',
    'ramp',
    'water',
    'grid',
    'cloth',
    'file',
    'ocean',
    'noise',
    'psdFileTex',
    'movie',
    'mountain',
    'mandelbrot',
    'place2dTexture',
    'place3dTexture',
    'blinn',
    'lambert'
]

def list_shading_nodes() -> None:
    
    shading_node_types = RMAN_NODES + MAYA_NODES + ARNOLD_NODES
    shading_nodes = list_nodes(shading_node_types)
    for node in shading_nodes:
        print(node)
    return shading_nodes
    
def delete_colon(file_name: str, liste_strings: list) -> None:
    try:
        with open(file_name, 'r') as fichier:
            contenu = fichier.read()

            for chaine in liste_strings:
                # Utilisation de l'expression régulière pour remplacer les occurrences
                contenu = re.sub(rf'":{chaine}\w*', f'"{chaine}', contenu)

        with open(file_name, 'w') as fichier:
            fichier.write(contenu)
            
        print(f"Les occurrences ont été remplacées dans le fichier {file_name}")
        
    except FileNotFoundError:
        print(f"Le fichier {file_name} n'a pas été trouvé.")
    except Exception as e:
        print(f"Une erreur s'est produite : {e}")
